#!/usr/bin/env python

import os
import pwd
import glob
from os import path
import argparse

login = os.getlogin()
pwd_entry = pwd.getpwnam(login)
uid = pwd_entry[2]
gid = pwd_entry[3]

config_dir = path.normpath(path.join(path.dirname(__file__), '..'))
root_script_dirs = ['install']
user_script_dirs = ['homedir', 'vim', 'hook']

def get_scripts(script_dirs):
    scripts = []
    for script_dir in script_dirs:
        for filename in glob.glob(path.join(config_dir, script_dir, '*')):
            if path.isfile(filename) and os.access(filename, os.X_OK):
                scripts.append(filename)
    return sorted(scripts, key=lambda filepath: path.basename(filepath))

parser = argparse.ArgumentParser(description='Run each setup scripts in order')
parser.add_argument('hostname', default=None, type=str, nargs='?',
                    help='Update the machine hostname')
parser.add_argument('--list', '-l',
                    action='store_true', default=False,
                    help='List the setup scripts rather than run')
parser.add_argument('--tex', '-t',
                    action='store_true', default=False,
                    help='Install texlive packages (very slow)')
args = parser.parse_args()

if args.tex:
    root_script_dirs.append('tex')

root_scripts = get_scripts(root_script_dirs)
user_scripts = get_scripts(user_script_dirs)

if args.list:
    for script in root_scripts:
        print '<root>', script
    for script in user_scripts:
        print '<{}>'.format(login), script
else:
    assert os.getlogin() != 'root', 'Must run as user with sudo'
    assert os.getuid() == 0 and os.getgid() == 0, 'Must use sudo'

    # run root scripts
    for script in root_scripts:
        os.system(script)

    # try update hostname
    if args.hostname:
        os.system('hostnamectl set-hostname {}'.format(args.hostname))

    # switch to user
    os.setgid(gid)
    os.setuid(uid)
    os.putenv('HOME', pwd_entry[5])

    # run user scripts
    for script in user_scripts:
        os.system(script)
