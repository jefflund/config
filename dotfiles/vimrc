" First, be iMproved
set nocompatible

" Plugins load faster with this off
filetype off

" Start Vundle loading

set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Load plugins
Plugin 'Lokaltog/vim-easymotion'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'Valloric/YouCompleteMe'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'drmingdrmer/vim-syntax-markdown'
Plugin 'fatih/vim-go'
Plugin 'garbas/vim-snipmate'
Plugin 'gmarik/Vundle.vim'
Plugin 'jlund3/colorschemer'
Plugin 'kien/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'mileszs/ack.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'tomtom/tlib_vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'

" Done loading plugins
call vundle#end()

" Turn on file type based options
syntax on
filetype on
filetype indent on
filetype plugin on
let g:tex_flavor="latex"

" Turn on a few more options
set title
set backspace=2
set scrolloff=2
set showcmd
set showmode
set guioptions=ace
set colorcolumn=81
set number
set relativenumber
set wrap
set ttyfast

" Even more options for vsplits
set winwidth=84
autocmd WinEnter * setlocal number relativenumber wrap
autocmd WinLeave * setlocal nonumber norelativenumber nowrap

" In memory buffers
set nobackup
set noswapfile
set hidden

" Switch up the colors
set t_Co=256
set t_ut=
colorscheme lucid

" Setup statusline
set laststatus=2
set statusline=%<
set statusline+=%t
set statusline+=\ %([%Y%R%H%W]%)
set statusline+=%m
set statusline+=%{fugitive#statusline()}
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=\ %{&spell?\"SPELL\ \":\"\"}
set statusline+=%{&paste?\"PASTE\":\"\"}
set statusline+=%=
set statusline+=%-14.(%l,%v%)
set statusline+=\ %P

" Setup cursorline
autocmd WinEnter * setlocal cursorline
autocmd BufEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
setlocal cursorline

" More sane split openings
set splitbelow
set splitright

" Set the leader keys
let mapleader=" "
let maplocalleader="-"

" Better whitespace
set list listchars=tab:»\ ,trail:·,nbsp:·
set expandtab
set textwidth=79
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent

" Handle trailing whitespace
function! StripTrailingWhitespace()
    let l=line(".")
    let c=col(".")
    execute '%s/\(\s\|\)\+$//e'
    call cursor(l, c)
endfunction
nnoremap <silent> <leader><space> :call StripTrailingWhitespace()<cr>

" Setup search
set hlsearch
set incsearch
set ignorecase
set smartcase
nnoremap <silent> <leader>/ :nohlsearch<cr>

" Setup NERDTree
nnoremap <silent> <leader>n :NERDTreeToggle<cr>
let NERDTreeIgnore=[]
let NERDTreeIgnore+=['\.pyc$', '__pycache__']
let NERDTreeIgnore+=['\.o$', '\.d$']
let NERDTreeIgnore+=['\.aux$', '\.log$']
let NERDTreeIgnore+=['\.class$']
let NERDTreeQuitOnOpen=1
let NERDTreeChDirMode=2

" Setup CtrlP
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(pyc)$',
    \ }
let g:ctrlp_working_path_mode = 'rc'

" Setup Tagbar
nnoremap <silent> <leader>t :TagbarToggle<cr>
let g:tagbar_autoclose=1
let g:tagbar_left=1
let g:tagbar_sort=0

" Setup YouCompleteMe
let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]
let g:ycm_server_log_level='error'
let g:ycm_key_detailed_diagnostics=''
let g:ycm_path_to_python_interpreter = '/usr/bin/python'

" Setup Syntastic
let g:syntastic_check_on_open = 1

" Setup ack.vim
let g:ack_autoclose=1
nnoremap <leader>a :Ack <c-r><c-w><cr>
nnoremap <silent> <leader>d :Ack "TODO\|FIXME\|XXX"<cr>

" Setup vim-tmux-navigator
let g:tmux_navigator_no_mappings=1
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>

" Setup vim-easymotion
let g:EasyMotion_do_mapping=0
let g:EasyMotion_smartcase=1
map ,f <Plug>(easymotion-f)
map ,F <Plug>(easymotion-F)
map ,t <Plug>(easymotion-t)
map ,T <Plug>(easymotion-T)
map ,w <Plug>(easymotion-w)
map ,W <Plug>(easymotion-W)
map ,b <Plug>(easymotion-b)
map ,B <Plug>(easymotion-B)
map ,e <Plug>(easymotion-e)
map ,E <Plug>(easymotion-E)

" Setup vim-go
let g:go_doc_keywordprg_enabled=0
let g:go_def_mapping_enabled=0
let g:go_textobj_enabled=0

" Navigation shortcuts
nnoremap <s-j> <c-f>zz
nnoremap <s-k> <c-u>zz
vnoremap <s-j> <c-f>zz
vnoremap <s-k> <c-u>zz
nnoremap j gj
nnoremap k gk

" Simplfy toggling a flag
function! ToggleFlag(option, flag)
    exec ('let lopt = &' . a:option)
    if lopt =~ (".*" . a:flag . ".*")
        exec ('set ' . a:option . '-=' . a:flag)
    else
        exec ('set ' . a:option . '+=' . a:flag)
    endif
endfunction

" Easy autowrap toggle
function! ToggleAutoWrap()
    call ToggleFlag('formatoptions', 't')
endfunction

" Easy quit and save
nnoremap <silent> <leader>Q :qa<cr>
nnoremap <silent> <leader>q :q<cr>
nnoremap <silent> <leader>w :w<cr>
nnoremap <silent> <leader>W :wa<cr>

" Save some keystrokes
vnoremap < <gv
vnoremap > >gv
nnoremap > >>
nnoremap < <<
nnoremap ; :
vnoremap ; :
nnoremap ! :!

" Other shortcuts
nnoremap <silent> <leader>s :set invspell<cr>
nnoremap <silent> <leader>v :set invpaste<cr>
nnoremap <silent> <leader>b :windo set scrollbind!<cr>
nnoremap <silent> <leader>r :edit %<cr>
nnoremap <silent> <F5> :redraw!<cr>

" Disable Ex mode
map Q <nop>

" I don't anticpate ever using Modula-2, but I do use *.md for markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
